import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pandasai import SmartDataframe
from pandasai import Agent
from pandasai.ee.agents.semantic_agent import SemanticAgent
from pandasai.ee.agents.judge_agent import JudgeAgent
from pandasai.ee.agents.advanced_security_agent import AdvancedSecurityAgent
from pandasai.connectors import PandasConnector
from langchain_groq import ChatGroq
from dotenv import load_dotenv
import os

env_loaded = load_dotenv()
api_key = os.getenv("GROQ_API_KEY")
os.environ["PANDASAI_API_KEY"] = os.getenv("PANDASAI_API_KEY")

llm = ChatGroq(
    model_name="llama-3.1-70b-versatile", 
    api_key = api_key,
    temperature=0)

file_formats = {
    "csv": pd.read_csv,
    "xls": pd.read_excel,
    "xlsx": pd.read_excel,
    "xlsm": pd.read_excel,
    "xlsb": pd.read_excel,
}
def load_data(uploaded_file):
    try:
        ext = os.path.splitext(uploaded_file.name)[1][1:].lower()
    except:
        ext = uploaded_file.split(".")[-1]
    if ext in file_formats:
        return file_formats[ext](uploaded_file)
    else:
        # st.error(f"Unsupported file format: {ext}")
        return None

field_descriptions = {
    'Order Date'    :   'The date the order was placed.',
    'Order ID'      :   'A unique identifier for the order.',
    'Product'       :   'The name of the product ordered.',
    'Product_ean'   :   'The European Article Number (EAN) of the product.',
    'cat√©gorie'     :   'The category of the product.',
    'Purchase Address'      :   'The address where the product was purchased.',
    'Quantity Ordered'      :   'The number of products ordered',
    'Price Each'    :   'The price of each individual product',
    'Cost price'    :   'The cost of purchasing each individual product.',
    'turnover'      :   'The total revenue generated by the order.',
    'margin'        :   'The profit made on the order.'
}
Description = "This is the Ecommerce Slaes Dataset."
def chat_with_data(df,prompt):
    connector = PandasConnector({"original_df": df}, field_descriptions=field_descriptions)
    sdf = SmartDataframe(connector, name="Sales Data", description= Description)
    judge = JudgeAgent()
    security = AdvancedSecurityAgent()
    pandas_ai_agent = Agent(sdf,config={'llm': llm,
                                    "save_logs": True,
                                    "save_charts" : True,
                                    "save_charts_path": "exports/adrit/",
                                    "enforce_privacy":True,
                                    "enable_cache" : True,
                                    "use_error_correction_framework" : True,
                                    "custom_whitelisted_dependencies": ["seaborn"]
                                    },
                            judge=judge,
                            security=security,
                            description="You are a data analysis agent. Your main goal is to help non-technical users to analyze data and give the correct answer of their questions."
                            )
    pandas_ai_agent.train(docs=""" The fiscal year starts in October. And Code shouldn't use 'os', 'io' or 'chr', 'b64decode' functions as this could lead to malicious code execution.
                      """)
    result = pandas_ai_agent.chat(prompt)
    return result

#-----------------TESTING------------------------------------------------------
# Read the Pandas DataFrame
uploaded_file = 'sales_data.csv'
dataset = load_data(uploaded_file)
# print(dataset)
# query = "Based on Order Date column create a table of month wise Total cost price and Total margin. Where month name will be month name with year. Where cost price and margin value will be two decimal number."
query = "Based on Order Date column plot a pie chart of month wise turnover."
answer = chat_with_data(dataset,query)
print(answer)
# print(chat_with_data("Based on Order Date column calculate Every Month wise profit percentage and loss percentage based on margin. I want output in table"))
# print(chat_with_data("Based on Order Date column plot a pie chart of month wise turnover. Where X axis will be the month name and Y axis will be the Trunover value. And show the value of every bar."))
# print(chat_with_data("Based on Order Date column plot a line graph of month wise Total cost price and Total margin. Where X axis will be the month name.Add value of cost price and margin in."))